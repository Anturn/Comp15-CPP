***************************************************************************
***                      COMP 15  Homework 3                            ***
***************************************************************************
Revised by : Rui Qin
Date: 9/13/2016

Purpose: 
        This assignment will implemet a (RPN) Reverse Polish Notation
        similar to the buit_in Unix "dc" calculator. In this assgnment, I use
        the sequence as the stack and follow the rule "Last in Frist out"(LIFO).


Files: 
      Totally, there are 5 files:
      
      
      
      DoubleStack.h: 
                     This is the header file for DoubleStack.cpp, this header file
                     contains all the function and variable for cpp file, no matter
                     public or private.
                     
                     Especially, there is a constant called capacity, which is the initial
                     size of the stack. Then the constructors with and without parameters 
                     will initialize the programm and the destructor will realese the memory.
                     
                     The ensureCapacity(), this function here in private is what I create in 
                     order to make sure there is enough space for the stack. If not, then the
                     stack will expand.
                     
      
      DoubleStack.cpp:  
                        The cpp file holds all detailed implements of functions and variable 
                        declared by the head file.
                      
                      
                        DoubleStack()  constructor
                        DoubleStack(double array[],int size);  constructor with parameters
                        ~DoubleStack()  desctructor
        
                        bool isEmpty()  Decide whether the data is empty
                        void clear()    Makes the current stack into a empty stack
                            int  size()     Return the size of the stack
                            double top()    Return the top element on the stack
                            double pop()    Removes the first element on the stack
                            void push(double Adouble) 
                        Takes an element and puts it on the top of the stack
        

                            double* doubleSequence  the pointer points to the DoubleStack
                            int num_double  number of double on the stack
                            int capacity    the total size of the current CharSequence
                            int head        the index of string that is the last moved into stack
                            
                            void ensureCapacity()  Always make sure there is enough space for double 
                     
      RPNCalc.h:
                This is the header file for the RNPCalc.cpp, this header file contains all
                the function and variable for cpp file, no matter public or private
                
                Especially:
                
                        DoubleStack Stack1; 
                        Make a instance of the DoubleStack class called Stack1
                        
                        double fir,sec; 
                        The variable used in swap function in order to change the order of
                        the double poped out
                          
                        bool isContinue;
                        The condition decides the while() loop in run() function whether continues
                
                
                
      RPNCalc.cpp:
                  This is the cpp file holds all detailed implements of functions and variables
                  declared by the head file
                  
                  
                  RPNCalc();   constructor
                  ~RPNCalc();  destructr
        
                  void run();  o a number causes the number to be placed on the stack
                               o an operator, which is one of the "+", "-", "*", or "/"
                               causes the top two elements to be popped off the stack, the
                               operation to be performed on them (addition, subtraction,
                               multiplication, or division) in the same order as dc, and
                               the result to be pushed on the top of the stack.
                               Note:  The result does NOT print.
                               o "p" or "P" prints the value on the top of the stack.
                               o "c" or "C" clears the calculator, emptying the stack.
                               o "f" or "F" followed by the name of a file causes the
                               contents of the named file to be read and processes as if
                               they had been typed into the command loop.  If the file
                               cannot be opened or read, the message "Unable to read
                               filename\n" (where "filename" is replaces with the name of
                               the file specified in the command) is printed to cerr.  The
                               program does not crash or throw an exception.
                               The command loop then continues reading data from cin.
                               o "q", which quits the calculator.
                               o For any other input, echo the offending input and print
                               ":  unimplemented\n" on cerr.  E. g., "x:  unimplemented"
                               Then continue accepting input.
        
        
        

                
                void run1();
                run the whole programm and main function is to 
                receive the input command and execute correspoonding 
                operation depending on the command given,this is the
                truncated part from run() function, which contains all 
                corresponding execution depends on the commands given
        
        
                bool isContinue;
                The condition decides the while() loop in run() 
                function whether continues
                
                bool operatorCommand(string command); 
                If the command is one of the operations, it will run and operate
                and return true, otherwise, it means the command is not one of 
                the operations
                
                void swap(); 
                Make the sequence of the two doubles poped out swap the 
                order in order to operate properly
                
                
                void toLowerCase(string& Astring); 
                Transfer the upper string to the lower case one
                
                
                bool got_double(string s, double *resultp); 
                Decide whether the string is a double number
                and transfers the string to double and assign 
                it to another variable
                
                void read_file(); 
                Read the file user give, including the double and operations normally
                
                void read_file(string Astring);
                The read file with parameters.Not read input from user
                anymore,but take the existed string in the txt file as input
                
                void copy_strings_from(istream &infile); 
                Copy each string of non-whitespace characters from the given 
                input stream onto standard output (cout), one string per line.
                 
                 
                 
                 
                 
                 README:
                       The file explains the whole programm
                       
                       
Compile and Run:
                Notice(For the file I provide, because we don't need to provide the test file, the compile misses the test file,
                       where is the main() function should be) 
                       My complete compile with the TEST.cpp is:
               
                Compile:
                        clang++ -std=c++11 -Wall -Wextra RPNCalc.cpp TEST.cpp DoubleStack.cpp (TEST.CPP)
        
                Run:
                        ./a.out
                
                
                
                
                
Data structures and Algorithms:
                              The major core for this homework3 is about stack. The main idea here is Last in First out(LIFO).
                              We have a index variable, which will always upgrade when a new element comes in. There are two
                              important functions here:
                              
                              pop(): This function takes the last comed in element out
                              
                              push(double Adouble): This function puts the element into the sequence
                              
                              There is also idea as dynamic sequence, which will expand whenever the space is not enough.

                                




                                                                                
















                
                
                
                
                

